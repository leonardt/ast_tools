__ALL__ += ['immutable', 'mutable', 'parse', 'dump',
			'iter_fields', 'iter_child_nodes', 'walk',
			'NodeVisitor', 'NodeTransformer']


def _cast_tree(seq_t, n_seq_t, type_look_up, tree):
    args = seq_t, n_seq_t, type_look_up

    if isinstance(tree, seq_t):
        return n_seq_t(_cast_tree(*args, c) for c in tree)

    try:
        T = type_look_up[type(tree)]
    except KeyError:
        return tree

    kwargs = {}
    for field, c in iter_fields(tree):
        kwargs[field] = _cast_tree(*args, c)

    return T(**kwargs)


def immutable(tree: ast.AST) -> 'AST':
    '''Converts a mutable ast to an immutable one'''
    return _cast_tree(list, tuple, ImmutableMeta._mutable_to_immutable, tree)

def mutable(tree: 'AST') -> ast.AST:
    '''Converts an immutable ast to a mutable one'''
    return _cast_tree(tuple, list, ImmutableMeta._immutable_to_mutable, tree)

def parse(source, filename='<unknown>', mode='exec') -> 'AST':
    tree = ast.parse(source, filename, mode)
    return immutable(tree)

def dump(node, annotate_fields=True, include_attributes=False) -> str:
    tree = mutable(node)
    return ast.dump(tree)


# duck typing ftw
iter_fields = ast.iter_fields

# The following is more or less copied verbatim from
# CPython/Lib/ast.py. Changes are:
# s/list/tuple/
#
# The CPython license is very permissive so I am pretty sure this is cool.
# If it is not Guido please forgive me.
def iter_child_nodes(node):
    for name, field in iter_fields(node):
        if isinstance(field, AST):
            yield field
        elif isinstance(field, tuple):
            for item in field:
                if isinstance(item, AST):
                    yield item

# Same note as above
def walk(node):
    from collections import deque
    todo = deque([node])
    while todo:
        node = todo.popleft()
        todo.extend(iter_child_nodes(node))
        yield node


# Same note as above
class NodeVisitor:
    def visit(self, node):
        method = 'visit_' + node.__class__.__name__
        visitor = getattr(self, method, self.generic_visit)
        return visitor(node)

    def generic_visit(self, node):
        for field, value in iter_fields(node):
            if isinstance(value,  tuple):
                for item in value:
                    if isinstance(item, AST):
                        self.visit(item)
            elif isinstance(value, AST):
                self.visit(value)


# Same note as above
class NodeTransformer(NodeVisitor):
    '''
    Mostly equivalent to ast.NodeTransformer, except returns new nodes
    instead of mutating them in place
    '''

    def generic_visit(self, node):
        kwargs = {}
        for field, old_value in iter_fields(node):
            if isinstance(old_value, tuple):
                new_value = []
                for value in old_value:
                    if isinstance(value, AST):
                        value = self.visit(value)
                        if value is None:
                            continue
                        elif not isinstance(value, AST):
                            new_value.extend(value)
                            continue
                    new_value.append(value)
                new_value = tuple(new_value)
            elif isinstance(type(old_value), ImmutableMeta):
                new_value = self.visit(old_value)
            else:
                new_value = old_value
            kwargs[field] = new_value
        return type(node)(**kwargs)
